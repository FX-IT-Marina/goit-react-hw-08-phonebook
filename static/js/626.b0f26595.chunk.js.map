{"version":3,"file":"static/js/626.b0f26595.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/FilterForm/FilterForm.styled.js","components/FilterForm/FilterForm.js","components/ContactList/ContactListItem/ContactListItem.styled.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  // width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-bottom: 30px;\n  padding: 20px 35px;\n  border: 2px solid #eac645;\n  border-radius: 20px;\n  background-color: black;\n\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.768), 0 16px 20px rgba(39, 37, 37, 0.2);\n`;\n\nexport const Input = styled(Field)`\n  border-radius: 24px;\n  padding: 4px 10px;\n  font-size: 20px;\n  border: 2px solid #eac645;\n`;\n\nexport const Error = styled.p`\n  color: red;\n  position: absolute;\n  font-size: 14px;\n  top: 10px;\n  left: 110px;\n`;\n\nexport const Button = styled.button`\n  border-radius: 50px;\n\n  margin-left: auto;\n  margin-right: auto;\n  padding: 5px;\n  width: 150px;\n  cursor: pointer;\n\n  font-weight: 600;\n  color: #eac645;\n  font-size: 20px;\n  font-weight: 800;\n  &:hover {\n    border: 2px solid #eac645;\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 25px;\n  color: rgb(37, 37, 37);\n  font-weight: 600;\n  display: flex;\n  gap: 10px;\n  justify-content: space-between;\n  position: relative;\n`;\n\nexport const LabelText = styled.span`\n  color: #eac645;\n  font-size: 25px;\n  font-weight: 700;\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectValue = state => state.filter.filter;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport {\n  Error,\n  StyledForm,\n  Button,\n  Label,\n  Input,\n  LabelText,\n} from './ContactForm.styled';\nimport { addContact } from 'redux/operation';\nimport { selectContacts } from 'redux/selectors';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage name={name} render={message => <Error>{message}</Error>} />\n  );\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const userSchema = object({\n    name: string().required(),\n    number: string().required(),\n  });\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const duplicate = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (duplicate) {\n      return alert(`${values.name} is already in contacts`);\n    }\n    setIsLoading(true);\n    await dispatch(addContact(values));\n    setIsLoading(false);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={userSchema}\n    >\n      <StyledForm>\n        <Label>\n          <LabelText>Name</LabelText>\n          <Input type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </Label>\n        <Label>\n          <LabelText>Number</LabelText>\n          <Input type=\"tel\" name=\"number\" />\n          <FormError name=\"number\" />\n        </Label>\n        <Button\n          isLoading={isLoading}\n          loadingText=\"Submitting\"\n          colorScheme=\"telegram\"\n          variant=\"outline\"\n          type=\"submit\"\n        >\n          Add contact\n        </Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-bottom: 30px;\n  padding: 20px 35px;\n  border: 2px solid #eac645;\n  border-radius: 20px;\n  background-color: black;\n  color: rgb(37, 37, 37);\n  font-size: 25px;\n  font-weight: 600;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.768), 0 16px 20px rgba(39, 37, 37, 0.2);\n`;\n\nexport const Input = styled.input`\n  border-radius: 24px;\n  padding: 4px 10px;\n  font-size: 20px;\n  border: 2px solid #eac645;\n`;\n\nexport const LabelText = styled.span`\n  color: #eac645;\n  font-size: 25px;\n  font-weight: 700;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\nimport { selectValue } from 'redux/selectors';\nimport { Label, Input, LabelText } from './FilterForm.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectValue);\n\n  const onChange = e => {\n    const filter = e.currentTarget.value;\n    dispatch(changeFilter(filter));\n  };\n\n  return (\n    <Label>\n      <LabelText>Find contacts by name</LabelText>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nexport const ContactName = styled.p`\n  color: #eac645;\n  font-size: 25px;\n  font-weight: 700;\n`;\nexport const Button = styled.button`\nborder-radius: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 5px;\n  width: 150px;\n  cursor: pointer;\n  font-weight: 600;\n  color: #eac645;\n  font-size: 20px;\n  font-weight: 800;\n  &:hover {\n    border: 2px solid #eac645;\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operation';\nimport { Item, ContactName, Button } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ id, name, number, handleModal }) => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleIsModalOpen = () => {\n    handleModal(id);\n  };\n\n  const deleteHandle = async () => {\n    setIsLoading(true);\n    await dispatch(deleteContact(id));\n    setIsLoading(false);\n  };\n\n  return (\n    <Item id={id}>\n      <ContactName>\n        {name}:<span>{number}</span>\n      </ContactName>\n      <Button onClick={handleIsModalOpen} type=\"submit\"></Button>\n      <Button onClick={deleteHandle} isLoading={isLoading}>\n        Delete\n      </Button>\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  box-sizing: border-box;\n  border-radius: 20px;\n  padding: 10px;\n  border: 2px solid #eac645;\n  border-radius: 20px;\n  background-color: black;\n  padding: 20px 35px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.768), 0 16px 20px rgba(39, 37, 37, 0.2);\n`;\n","import { ContactListItem } from './ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { selectFilter } from 'redux/selectors';\n\nexport const ContactList = ({ handleModal }) => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = () => {\n    if (contacts) {\n      return contacts.filter(({ name }) =>\n        name\n          .split(' ')\n          .join('')\n          .toLocaleLowerCase()\n          .includes(filter.toLocaleLowerCase())\n      );\n    }\n  };\n\n  return (\n    <List>\n      {visibleContacts().map(({ name, number, id }) => {\n        return (\n          <ContactListItem\n            name={name}\n            number={number}\n            key={id}\n            id={id}\n            handleModal={handleModal}\n          />\n        );\n      })}\n    </List>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operation';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/FilterForm/FilterForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Spinner } from '@chakra-ui/react';\nimport { selectIsLoading } from 'redux/selectors';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      {isLoading ? <Spinner color=\"orange.500\" /> : <ContactList />}\n    </div>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Input","Field","_templateObject2","Error","_templateObject3","Button","_templateObject4","Label","_templateObject5","LabelText","_templateObject6","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","selectValue","FormError","_ref","name","_jsx","ErrorMessage","render","message","children","ContactForm","_ref3","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","setIsLoading","userSchema","object","string","required","number","Formik","initialValues","onSubmit","_x","_x2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref2","resetForm","wrap","_context","prev","next","some","_ref4","toLowerCase","abrupt","alert","concat","addContact","stop","apply","arguments","validationSchema","_jsxs","type","loadingText","colorScheme","variant","Filter","value","onChange","e","currentTarget","changeFilter","pattern","title","Item","ContactName","ContactListItem","id","handleModal","onClick","deleteContact","List","ContactList","split","join","toLocaleLowerCase","includes","visibleContacts","map","ContactsPage","useEffect","fetchContacts","Spinner","color"],"sourceRoot":""}